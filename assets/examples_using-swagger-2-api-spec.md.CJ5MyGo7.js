import{_ as o,c as a,o as i,a2 as t}from"./chunks/framework.CulRYwFH.js";const g=JSON.parse('{"title":"Using Swagger 2 API Specification","description":"","frontmatter":{},"headers":[],"relativePath":"examples/using-swagger-2-api-spec.md","filePath":"examples/using-swagger-2-api-spec.md"}'),n={name:"examples/using-swagger-2-api-spec.md"};function s(l,e,r,p,c,d){return i(),a("div",null,e[0]||(e[0]=[t('<h1 id="using-swagger-2-api-specification" tabindex="-1">Using Swagger 2 API Specification <a class="header-anchor" href="#using-swagger-2-api-specification" aria-label="Permalink to &quot;Using Swagger 2 API Specification&quot;">​</a></h1><blockquote><p>As the Swagger 2 API does not have <code>operrationId</code> they will not work for the MCP composer. Hence we need to convert the swagger 2 file to swagger 3 file and fix the <code>operationId</code></p></blockquote><h2 id="convert-v2-to-v3-yaml-file" tabindex="-1">Convert v2 to v3 yaml file <a class="header-anchor" href="#convert-v2-to-v3-yaml-file" aria-label="Permalink to &quot;Convert v2 to v3 yaml file&quot;">​</a></h2><ol><li><p>Open a tab in browser and navigate to <code>https://editor.swagger.io/</code></p></li><li><p>Click &quot;Import&quot; and select the file <code>example/openapispec/spec.json</code></p></li><li><p>Click Edit &gt; Convert to OpenAPI 3</p></li><li><p>Click on &quot;Convert&quot; and if there is error ignore for now. As there is no operationId in v2 these error are being there</p></li><li><p>Copy all from the editor open a new file in your text editor and save the file as <code>example/openapispec/spec.yaml</code> yaml file</p></li></ol><h2 id="fix-the-operation-id" tabindex="-1">Fix the operation id <a class="header-anchor" href="#fix-the-operation-id" aria-label="Permalink to &quot;Fix the operation id&quot;">​</a></h2><ol><li>clone the repo <a href="https://github.ibm.com/ai-elite/mcp-schema-optimization" target="_blank" rel="noreferrer">mcp-schema-optimization</a></li><li>cd to the <code>mcp-schema-optimization</code> folder run <code>uv sync</code></li><li>run the following command where <code>spec.yml</code> is the input file and <code>test_output.json</code> is the output<div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">uv</span><span style="color:#C3E88D;"> run</span><span style="color:#C3E88D;"> python</span><span style="color:#C3E88D;"> main.py</span><span style="color:#C3E88D;"> spec.yml</span><span style="color:#C3E88D;"> test_output.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>this will generate a file called <code>test_output.json</code> which has the operation id fixed</li></ol>',6)]))}const m=o(n,[["render",s]]);export{g as __pageData,m as default};
