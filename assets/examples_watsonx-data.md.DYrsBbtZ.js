import{_ as n,c as a,o as e,a2 as p}from"./chunks/framework.CulRYwFH.js";const o="/mcp-composer/assets/01.CmDaorvM.png",b=JSON.parse('{"title":"IBM watsonx.data Demo","description":"","frontmatter":{},"headers":[],"relativePath":"examples/watsonx-data.md","filePath":"examples/watsonx-data.md"}'),t={name:"examples/watsonx-data.md"};function l(i,s,r,c,u,d){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ibm-watsonx-data-demo" tabindex="-1">IBM watsonx.data Demo <a class="header-anchor" href="#ibm-watsonx-data-demo" aria-label="Permalink to &quot;IBM watsonx.data Demo&quot;">​</a></h1><p>This guide shows you how to integrate MCP Composer with IBM watsonx.data API and then test it using MCP Inspector or Claude Desktop.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>IBM watsonx.data exposes API and provides OpenAPI specification that is available at <code>./spec/wx-data-openapi.json.</code></p><p>This demo consists of two examples:</p><ul><li>connection from MCP Inspector to MCP Composer running in HTTP mode</li><li>connection from Claude Dektop to MCP Composer running in STDIO mode</li></ul><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>Prepare a new configuration file by providing values for the following attributes:</p><ul><li>endpoint - watsonx.data API endpoint</li><li>apikey - watsonx.data apikey</li></ul><p>and customize <code>custom_routes</code> according to your specific needs.</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    &quot;id&quot;: &quot;wx-data&quot;,</span></span>
<span class="line"><span>    &quot;type&quot;: &quot;openapi&quot;,</span></span>
<span class="line"><span>    &quot;open_api&quot;: {</span></span>
<span class="line"><span>      &quot;endpoint&quot;: &quot;...&quot;,</span></span>
<span class="line"><span>      &quot;spec_filepath&quot;: &quot;./spec/wx-data-openapi.json&quot;,</span></span>
<span class="line"><span>      &quot;custom_routes&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;methods&quot;: [</span></span>
<span class="line"><span>            &quot;GET&quot;,</span></span>
<span class="line"><span>            &quot;POST&quot;</span></span>
<span class="line"><span>          ],</span></span>
<span class="line"><span>          &quot;pattern&quot;: &quot;.*/&quot;,</span></span>
<span class="line"><span>          &quot;mcp_type&quot;: &quot;TOOL&quot;</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;methods&quot;: [</span></span>
<span class="line"><span>            &quot;DELETE&quot;,</span></span>
<span class="line"><span>            &quot;PUT&quot;,</span></span>
<span class="line"><span>            &quot;PATCH&quot;</span></span>
<span class="line"><span>          ],</span></span>
<span class="line"><span>          &quot;pattern&quot;: &quot;.*/&quot;,</span></span>
<span class="line"><span>          &quot;mcp_type&quot;: &quot;EXCLUDE&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;auth_strategy&quot;: &quot;dynamic_bearer&quot;,</span></span>
<span class="line"><span>    &quot;auth&quot;: {</span></span>
<span class="line"><span>      &quot;auth_prefix&quot;: &quot;Bearer&quot;,</span></span>
<span class="line"><span>      &quot;apikey&quot;: &quot;...&quot;,</span></span>
<span class="line"><span>      &quot;token_url&quot;: &quot;https://iam.cloud.ibm.com/identity/token&quot;</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;_id&quot;: &quot;wx-data&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>When starting MCP Composer, this configuration file should be passed as an environment variable:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>SERVER_CONFIG_FILE_PATH=&quot;./wx-data-config.json&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="mcp-inspector-example" tabindex="-1">MCP Inspector example <a class="header-anchor" href="#mcp-inspector-example" aria-label="Permalink to &quot;MCP Inspector example&quot;">​</a></h2><p>Follow this <a href="/mcp-composer/examples/mcp-inspector.html">MCP Inspector Demo</a> to start MCP Composer in HTTP mode and connect to it using MCP Inspector. You will gain access to the exposed MCP tools, which you can call.</p><h2 id="claude-desktop-example" tabindex="-1">Claude Desktop example <a class="header-anchor" href="#claude-desktop-example" aria-label="Permalink to &quot;Claude Desktop example&quot;">​</a></h2><p>You need at least a Claude Desktop Pro plan to use the tools exposed by MCP Composer. Start your Claude Desktop application and go to <code>Claude -&gt; Settings -&gt; Developer</code> and click <code>Edit Config</code>. Then you will need to edit the &#39;claude_desktop_config.json&#39; file using your preferred editor and add MCP Composer to the list of <code>mcpServers</code>.</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;mcpServers&quot;: {</span></span>
<span class="line"><span>    &quot;composer&quot;:{</span></span>
<span class="line"><span>      &quot;command&quot;:&quot;/opt/homebrew/bin/uv&quot;,</span></span>
<span class="line"><span>      &quot;args&quot;:[</span></span>
<span class="line"><span>        &quot;--directory&quot;,</span></span>
<span class="line"><span>        &quot;.../mcp-composer/test/&quot;,</span></span>
<span class="line"><span>        &quot;run&quot;,</span></span>
<span class="line"><span>        &quot;test_composer.py&quot;</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Restart Claude Desktop and, you can start using tools exposed by MCP Composer. The first step in a conversation is to provide the <code>Instance identifier</code> (CRN) that should be used during the interaction. Below is an example of a conversation with watsonx.data.</p><p><img src="`+o+'" alt="alt text"></p>',20)]))}const q=n(t,[["render",l]]);export{b as __pageData,q as default};
