import{_ as o,C as p,c as t,o as n,a2 as a,b as r,w as l,a as c,G as i,a3 as D}from"./chunks/framework.CulRYwFH.js";const g=JSON.parse('{"title":"MCP Composer OpenAPI Flow: From Config to Tools","description":"","frontmatter":{},"headers":[],"relativePath":"guide/layered_mcp_server.md","filePath":"guide/layered_mcp_server.md"}'),F={name:"guide/layered_mcp_server.md"};function y(u,s,m,d,b,h){const e=p("Mermaid");return n(),t("div",null,[s[1]||(s[1]=a('<h1 id="mcp-composer-openapi-flow-from-config-to-tools" tabindex="-1">MCP Composer OpenAPI Flow: From Config to Tools <a class="header-anchor" href="#mcp-composer-openapi-flow-from-config-to-tools" aria-label="Permalink to &quot;MCP Composer OpenAPI Flow: From Config to Tools&quot;">‚Äã</a></h1><h2 id="üåü-inspired-by-block-s-layered-tool-pattern" tabindex="-1">üåü <strong>Inspired by Block&#39;s Layered Tool Pattern</strong> <a class="header-anchor" href="#üåü-inspired-by-block-s-layered-tool-pattern" aria-label="Permalink to &quot;üåü **Inspired by Block&#39;s Layered Tool Pattern**&quot;">‚Äã</a></h2><p>This implementation follows the <strong>&quot;Layered Tool Pattern&quot;</strong> pioneered by <a href="https://engineering.block.xyz/blog/build-mcp-tools-like-ogres-with-layers" target="_blank" rel="noreferrer">Block&#39;s Engineering team</a>, which demonstrates how to build MCP tools like ogres - with layers!</p><blockquote><p>&quot;Ogres are like onions. Onions have layers. Ogres have layers.&quot; - Shrek</p></blockquote><p>The same principle applies to AI tools. Rather than building monolithic tools that overwhelm LLMs, we use distinct functional layers that work together to guide AI agents through progressive steps.</p><hr><h2 id="üèóÔ∏è-reference-architecture-layered-tool-pattern" tabindex="-1">üèóÔ∏è <strong>Reference Architecture: Layered Tool Pattern</strong> <a class="header-anchor" href="#üèóÔ∏è-reference-architecture-layered-tool-pattern" aria-label="Permalink to &quot;üèóÔ∏è **Reference Architecture: Layered Tool Pattern**&quot;">‚Äã</a></h2>',7)),(n(),r(D,null,{default:l(()=>[i(e,{id:"mermaid-21",class:"mermaid-block",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22Layer%201%3A%20Discovery%22%0A%20%20%20%20%20%20%20%20A%5Bget_service_info%5D%20--%3E%20A1%5BDiscover%20available%20API%20operations%5D%0A%20%20%20%20%20%20%20%20A1%20--%3E%20A2%5BFilter%20by%20custom%20routes%5D%0A%20%20%20%20%20%20%20%20A2%20--%3E%20A3%5BShow%20only%20allowed%20operations%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Layer%202%3A%20Planning%22%0A%20%20%20%20%20%20%20%20B%5Bget_type_info%5D%20--%3E%20B1%5BGet%20detailed%20schema%20information%5D%0A%20%20%20%20%20%20%20%20B1%20--%3E%20B2%5BResolve%20%24ref%20schemas%5D%0A%20%20%20%20%20%20%20%20B2%20--%3E%20B3%5BGenerate%20examples%20%26%20clean%20schemas%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Layer%203%3A%20Execution%22%0A%20%20%20%20%20%20%20%20C%5Bmake_tool_call%5D%20--%3E%20C1%5BExecute%20actual%20API%20calls%5D%0A%20%20%20%20%20%20%20%20C1%20--%3E%20C2%5BHandle%20HTTP%20requests%5D%0A%20%20%20%20%20%20%20%20C2%20--%3E%20C3%5BReturn%20structured%20responses%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22OpenAPI%20Processing%22%0A%20%20%20%20%20%20%20%20D%5BOpenAPI%20Spec%5D%20--%3E%20D1%5BCustom%20Routes%20Filtering%5D%0A%20%20%20%20%20%20%20%20D1%20--%3E%20D2%5BSchema%20Resolution%5D%0A%20%20%20%20%20%20%20%20D2%20--%3E%20D3%5BEnhanced%20Metadata%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20A%20--%3E%20B%0A%20%20%20%20B%20--%3E%20C%0A%20%20%20%20D%20--%3E%20A%0A%20%20%20%20D%20--%3E%20B%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23e1f5fe%0A%20%20%20%20style%20B%20fill%3A%23f3e5f5%0A%20%20%20%20style%20C%20fill%3A%23e8f5e8%0A%20%20%20%20style%20D%20fill%3A%23fff3e0%0A"})]),fallback:l(()=>s[0]||(s[0]=[c(" Loading... ",-1)])),_:1})),s[2]||(s[2]=a(`<p><strong>Key Benefits of Layering:</strong></p><ul><li><strong>Discovery Layer</strong>: Guides AI to understand what&#39;s available</li><li><strong>Planning Layer</strong>: Helps AI formulate correct API calls</li><li><strong>Execution Layer</strong>: Performs the actual operations</li><li><strong>Progressive Complexity</strong>: Each layer builds on the previous one</li></ul><hr><h2 id="üîÑ-complete-flow-overview" tabindex="-1">üîÑ <strong>Complete Flow Overview</strong> <a class="header-anchor" href="#üîÑ-complete-flow-overview" aria-label="Permalink to &quot;üîÑ **Complete Flow Overview**&quot;">‚Äã</a></h2><p>This document explains the step-by-step process of how MCP Composer processes OpenAPI specifications with <code>orges: true</code>, from configuration to final tool organization, implementing the Layered Tool Pattern.</p><hr><h2 id="üìã-step-1-configuration-config-json" tabindex="-1">üìã <strong>Step 1: Configuration (config.json)</strong> <a class="header-anchor" href="#üìã-step-1-configuration-config-json" aria-label="Permalink to &quot;üìã **Step 1: Configuration (config.json)**&quot;">‚Äã</a></h2><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">mcp-hybrid-mesh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">openapi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">open_api</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">endpoint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">https://app.hybridcloudmesh.ibm.com/api/v1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">spec_filepath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">./spec/hybrid_mesh.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">orges</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> true,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">custom_routes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">      {</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">methods</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">pattern</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">.*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">mcp_type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">TOOL</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#89DDFF;">      {</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">methods</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">DELETE</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">PUT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">PATCH</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">pattern</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">.*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">mcp_type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">EXCLUDE</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>Key Points:</strong></p><ul><li><strong><code>orges: true</code></strong> ‚Üí Triggers use of <code>OgreOpenAPIFactory</code> instead of standard <code>FastMCP.from_openapi()</code></li><li><strong><code>custom_routes</code></strong> ‚Üí Defines filtering rules for API operations</li><li><strong>Pattern <code>&quot;.*&quot;</code></strong> ‚Üí Matches all paths</li><li><strong>GET = TOOL</strong> ‚Üí Include GET operations as tools</li><li><strong>POST/DELETE/PUT/PATCH = EXCLUDE</strong> ‚Üí Completely exclude these operations</li></ul><hr><h2 id="üè≠-step-2-ogreopenapifactory-initialization" tabindex="-1">üè≠ <strong>Step 2: OgreOpenAPIFactory Initialization</strong> <a class="header-anchor" href="#üè≠-step-2-ogreopenapifactory-initialization" aria-label="Permalink to &quot;üè≠ **Step 2: OgreOpenAPIFactory Initialization**&quot;">‚Äã</a></h2><p>When <code>orges: true</code>, the builder creates an <code>OgreOpenAPIFactory</code> instance:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># From MCPServerBuilder.build()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> openapi_config</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orges</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#BABED8;">    mcp </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> OgreOpenAPIFactory</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">        openapi_spec</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">spec</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">        client</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">http_client</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">        custom_routes</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">custom_mappings</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  # Converted from custom_routes</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">        custom_routes_exclude_all</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">exclude_all_route</span></span>
<span class="line"><span style="color:#89DDFF;">    )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>What Happens:</strong></p><ol><li><strong>Loads OpenAPI spec</strong> from <code>hybrid_mesh.json</code></li><li><strong>Converts custom_routes</strong> to <code>RouteMap</code> objects</li><li><strong>Initializes with instructions</strong> for LLM understanding</li><li><strong>Builds service metadata</strong> with custom routes filtering</li></ol><hr><h2 id="üìö-step-3-factory-instructions-for-llms" tabindex="-1">üìö <strong>Step 3: Factory Instructions for LLMs</strong> <a class="header-anchor" href="#üìö-step-3-factory-instructions-for-llms" aria-label="Permalink to &quot;üìö **Step 3: Factory Instructions for LLMs**&quot;">‚Äã</a></h2><p>The factory provides clear instructions to LLMs about available tools:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">super</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ogre OpenAPI FastMCP</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    instructions</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;&quot;</span><span style="color:#C3E88D;">This MCP server provides access to OpenAPI-based tools with three main capabilities:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">1. **get_service_info** - Discover and list all available API operations/tools:</span></span>
<span class="line"><span style="color:#C3E88D;">   - Call without parameters to see all available services</span></span>
<span class="line"><span style="color:#C3E88D;">   - Call with a specific service name to get detailed information including schema summaries</span></span>
<span class="line"><span style="color:#C3E88D;">   - Use this to understand what API operations are available</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">2. **get_type_info** - Get detailed parameter, input, and output information for a specific service:</span></span>
<span class="line"><span style="color:#C3E88D;">   - Call with a service name (operationId) to get comprehensive details</span></span>
<span class="line"><span style="color:#C3E88D;">   - Returns parameter schemas, request body schemas, response schemas, and examples</span></span>
<span class="line"><span style="color:#C3E88D;">   - Use this to understand how to call a specific API operation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">3. **make_tool_call** - Execute an actual API call to the specified service:</span></span>
<span class="line"><span style="color:#C3E88D;">   - Call with a service name and optional request parameters</span></span>
<span class="line"><span style="color:#C3E88D;">   - This is the tool that actually performs the HTTP request to the underlying API</span></span>
<span class="line"><span style="color:#C3E88D;">   - Use this after understanding the service details from the other tools</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">Usage workflow:</span></span>
<span class="line"><span style="color:#C3E88D;">1. First use get_service_info() to see what&#39;s available</span></span>
<span class="line"><span style="color:#C3E88D;">2. Then use get_type_info(service_name) to understand the specific service</span></span>
<span class="line"><span style="color:#C3E88D;">3. Finally use make_tool_call(service_name, request_data) to execute the API call</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">All tools automatically resolve OpenAPI schema references and provide enhanced metadata including examples and cleaned schemas.</span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><strong>LLM Workflow:</strong></p><ol><li><strong>Explore</strong> ‚Üí Use <code>get_service_info()</code> to see available operations</li><li><strong>Understand</strong> ‚Üí Use <code>get_type_info(service_name)</code> for detailed schema info</li><li><strong>Execute</strong> ‚Üí Use <code>make_tool_call(service_name, request_data)</code> to make API calls</li></ol><hr><h2 id="üîç-step-4-service-metadata-building-with-custom-routes-filtering" tabindex="-1">üîç <strong>Step 4: Service Metadata Building with Custom Routes Filtering</strong> <a class="header-anchor" href="#üîç-step-4-service-metadata-building-with-custom-routes-filtering" aria-label="Permalink to &quot;üîç **Step 4: Service Metadata Building with Custom Routes Filtering**&quot;">‚Äã</a></h2><p>The factory processes the OpenAPI spec and applies custom routes filtering:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> _build_service_metadata</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#BABED8;"> Dict</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Dict</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#BABED8;">    services </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # Parse OpenAPI paths</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> path</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> path_item </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">openapi_spec</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">paths</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">items</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        for</span><span style="color:#BABED8;"> http_method</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> operation </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> path_item</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">items</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            if</span><span style="color:#BABED8;"> http_method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lower</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">put</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">delete</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">patch</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                # üîë KEY: Apply custom routes filtering</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                if</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_should_include_operation</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">http_method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">upper</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> path</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">                    operation_id </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> operation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">operationId</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                    if</span><span style="color:#BABED8;"> operation_id</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">                        services</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">operation_id</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">                            &#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> operation_id</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                            &#39;</span><span style="color:#C3E88D;">http_method</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> http_method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">upper</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#89DDFF;">                            &#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> path</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                            &#39;</span><span style="color:#C3E88D;">parameters</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_extract_parameter_schemas</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">                            &#39;</span><span style="color:#C3E88D;">request_body</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_extract_request_body_schema</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">                            &#39;</span><span style="color:#C3E88D;">responses</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_extract_response_schemas</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                            # ... other metadata</span></span>
<span class="line"><span style="color:#89DDFF;">                        }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> services</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><hr><h2 id="üö´-step-5-custom-routes-filtering-logic" tabindex="-1">üö´ <strong>Step 5: Custom Routes Filtering Logic</strong> <a class="header-anchor" href="#üö´-step-5-custom-routes-filtering-logic" aria-label="Permalink to &quot;üö´ **Step 5: Custom Routes Filtering Logic**&quot;">‚Äã</a></h2><p>The <code>_should_include_operation()</code> method implements the filtering:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> _should_include_operation</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> http_method</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> str</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> str</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#FFCB6B;"> bool</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#89DDFF;"> not</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">custom_routes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;"> True</span><span style="color:#676E95;font-style:italic;">  # Include all if no custom routes</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#BABED8;">    operation_handled </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> False</span></span>
<span class="line"><span style="color:#BABED8;">    should_include </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> False</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> route_rule </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">custom_routes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        methods </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getattr</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">route_rule</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">methods</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> [])</span></span>
<span class="line"><span style="color:#BABED8;">        pattern </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getattr</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">route_rule</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">pattern</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">.*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">        mcp_type </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getattr</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">route_rule</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">mcp_type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">TOOL</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">        </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#BABED8;"> http_method </span><span style="color:#89DDFF;">in</span><span style="color:#BABED8;"> methods </span><span style="color:#89DDFF;">and</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_matches_pattern</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">path</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> pattern</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">            operation_handled </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> True</span></span>
<span class="line"><span style="color:#BABED8;">            </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            if</span><span style="color:#BABED8;"> mcp_type </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> MCPType</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">TOOL</span><span style="color:#89DDFF;"> or</span><span style="color:#BABED8;"> mcp_type </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> MCPType</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">RESOURCE</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">                should_include </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> True</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            elif</span><span style="color:#BABED8;"> mcp_type </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> MCPType</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">EXCLUDE</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">                return</span><span style="color:#89DDFF;"> False</span><span style="color:#676E95;font-style:italic;">  # EXCLUDE takes precedence</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#BABED8;"> operation_handled</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> should_include</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> False</span><span style="color:#676E95;font-style:italic;">  # Default: exclude if not explicitly handled</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><strong>Filtering Results for Hybrid Mesh:</strong></p><ul><li><strong>GET operations</strong> ‚Üí Match pattern <code>&quot;.*&quot;</code> ‚Üí <code>mcp_type: &quot;TOOL&quot;</code> ‚Üí <strong>INCLUDED</strong> ‚úÖ</li><li><strong>POST operations</strong> ‚Üí Match pattern <code>&quot;.*&quot;</code> ‚Üí <code>mcp_type: &quot;EXCLUDE&quot;</code> ‚Üí <strong>EXCLUDED</strong> ‚ùå</li><li><strong>DELETE operations</strong> ‚Üí Match pattern <code>&quot;.*&quot;</code> ‚Üí <code>mcp_type: &quot;EXCLUDE&quot;</code> ‚Üí <strong>EXCLUDED</strong> ‚ùå</li><li><strong>PUT operations</strong> ‚Üí Match pattern <code>&quot;.*&quot;</code> ‚Üí <code>mcp_type: &quot;EXCLUDE&quot;</code> ‚Üí <strong>EXCLUDED</strong> ‚ùå</li><li><strong>PATCH operations</strong> ‚Üí Match pattern <code>&quot;.*&quot;</code> ‚Üí <code>mcp_type: &quot;EXCLUDE&quot;</code> ‚Üí <strong>EXCLUDED</strong> ‚ùå</li></ul><hr><h2 id="üß†-step-6-enhanced-schema-processing" tabindex="-1">üß† <strong>Step 6: Enhanced Schema Processing</strong> <a class="header-anchor" href="#üß†-step-6-enhanced-schema-processing" aria-label="Permalink to &quot;üß† **Step 6: Enhanced Schema Processing**&quot;">‚Äã</a></h2><p>For each included operation, the factory enhances schema information:</p><h3 id="parameter-schema-extraction" tabindex="-1"><strong>Parameter Schema Extraction</strong> <a class="header-anchor" href="#parameter-schema-extraction" aria-label="Permalink to &quot;**Parameter Schema Extraction**&quot;">‚Äã</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> _extract_parameter_schemas</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> parameters</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> param </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> parameters</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        schema </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">schema</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {})</span></span>
<span class="line"><span style="color:#BABED8;">        </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        # üîë Resolve $ref schemas</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">$ref</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> schema</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">            original_ref </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> schema</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$ref</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">            resolved_schema </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_resolve_schema_reference</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">original_ref</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            if</span><span style="color:#BABED8;"> resolved_schema</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">                schema </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> resolved_schema</span></span>
<span class="line"><span style="color:#BABED8;">        </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        # Clean schema for display</span></span>
<span class="line"><span style="color:#BABED8;">        cleaned_schema </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> clean_schema_for_display</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">schema</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">        </span></span>
<span class="line"><span style="color:#BABED8;">        enhanced_param </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">            &#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">            &#39;</span><span style="color:#C3E88D;">in</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">in</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">            &#39;</span><span style="color:#C3E88D;">schema</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> cleaned_schema</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">            &#39;</span><span style="color:#C3E88D;">original_ref</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> original_ref  </span><span style="color:#676E95;font-style:italic;"># Preserve reference for context</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="request-body-processing" tabindex="-1"><strong>Request Body Processing</strong> <a class="header-anchor" href="#request-body-processing" aria-label="Permalink to &quot;**Request Body Processing**&quot;">‚Äã</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> _extract_request_body_schema</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> request_body</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # Extract from content.application/json.schema</span></span>
<span class="line"><span style="color:#BABED8;">    content </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> request_body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {})</span></span>
<span class="line"><span style="color:#BABED8;">    json_content </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> content</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">application/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {})</span></span>
<span class="line"><span style="color:#BABED8;">    schema </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> json_content</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">schema</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {})</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">$ref</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> schema</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        original_ref </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> schema</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$ref</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">        resolved_schema </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_resolve_schema_reference</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">original_ref</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#BABED8;"> resolved_schema</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">            schema </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> resolved_schema</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # Clean and generate example</span></span>
<span class="line"><span style="color:#BABED8;">    cleaned_schema </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> clean_schema_for_display</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">schema</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    example </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> generate_example_from_schema</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">schema</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        &#39;</span><span style="color:#C3E88D;">schema</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> cleaned_schema</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        &#39;</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> example</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        &#39;</span><span style="color:#C3E88D;">original_ref</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> original_ref</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="response-schema-analysis" tabindex="-1"><strong>Response Schema Analysis</strong> <a class="header-anchor" href="#response-schema-analysis" aria-label="Permalink to &quot;**Response Schema Analysis**&quot;">‚Äã</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> _extract_response_schemas</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> responses</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # Use FastMCP utility for comprehensive extraction</span></span>
<span class="line"><span style="color:#BABED8;">    output_schema </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> extract_output_schema_from_responses</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">responses</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#BABED8;"> output_schema</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        cleaned_schema </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> clean_schema_for_display</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">output_schema</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> cleaned_schema</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # Fallback: manual processing with $ref resolution</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # ... similar to parameters and request body</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><hr><h2 id="üéØ-step-7-final-tool-organization" tabindex="-1">üéØ <strong>Step 7: Final Tool Organization</strong> <a class="header-anchor" href="#üéØ-step-7-final-tool-organization" aria-label="Permalink to &quot;üéØ **Step 7: Final Tool Organization**&quot;">‚Äã</a></h2><p>After processing, the factory registers exactly 3 tools:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Add our custom tools</span></span>
<span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_tool</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Tool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">get_service_info</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_tool</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Tool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">get_type_info</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_tool</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Tool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">make_tool_call</span><span style="color:#89DDFF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Available Tools:</strong></p><ol><li><strong><code>get_service_info</code></strong> ‚Üí Lists filtered services (only GET operations)</li><li><strong><code>get_type_info</code></strong> ‚Üí Provides detailed schema information for a service</li><li><strong><code>make_tool_call</code></strong> ‚Üí Executes actual API calls</li></ol><hr><h2 id="üìä-step-8-real-world-example-hybrid-mesh" tabindex="-1">üìä <strong>Step 8: Real-World Example - Hybrid Mesh</strong> <a class="header-anchor" href="#üìä-step-8-real-world-example-hybrid-mesh" aria-label="Permalink to &quot;üìä **Step 8: Real-World Example - Hybrid Mesh**&quot;">‚Äã</a></h2><h3 id="original-openapi-spec" tabindex="-1"><strong>Original OpenAPI Spec</strong> <a class="header-anchor" href="#original-openapi-spec" aria-label="Permalink to &quot;**Original OpenAPI Spec**&quot;">‚Äã</a></h3><ul><li><strong>Total operations</strong>: 162 (mix of GET, POST, PUT, DELETE, PATCH)</li><li><strong>Paths</strong>: Various API endpoints for hybrid cloud management</li></ul><h3 id="after-custom-routes-filtering" tabindex="-1"><strong>After Custom Routes Filtering</strong> <a class="header-anchor" href="#after-custom-routes-filtering" aria-label="Permalink to &quot;**After Custom Routes Filtering**&quot;">‚Äã</a></h3><ul><li><strong>Included operations</strong>: 58 (only GET operations)</li><li><strong>Excluded operations</strong>: 104 (POST, PUT, DELETE, PATCH)</li><li><strong>Result</strong>: Clean, read-only API interface</li></ul><h3 id="schema-enhancement-examples" tabindex="-1"><strong>Schema Enhancement Examples</strong> <a class="header-anchor" href="#schema-enhancement-examples" aria-label="Permalink to &quot;**Schema Enhancement Examples**&quot;">‚Äã</a></h3><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Before (with $ref)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">parameters</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">application_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">schema</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">$ref</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">#/components/schemas/UUID</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// After (resolved and enhanced)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">parameters</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">application_id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">schema</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">format</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F78C6C;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Unique identifier for the application</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">original_ref</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">#/components/schemas/UUID</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><hr><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h2><h2 id="üîÑ-summary-the-complete-flow" tabindex="-1">üîÑ <strong>Summary: The Complete Flow</strong> <a class="header-anchor" href="#üîÑ-summary-the-complete-flow" aria-label="Permalink to &quot;üîÑ **Summary: The Complete Flow**&quot;">‚Äã</a></h2><ol><li><strong>Config Loaded</strong> ‚Üí <code>orges: true</code> triggers <code>OgreOpenAPIFactory</code></li><li><strong>Custom Routes Parsed</strong> ‚Üí Converted to <code>RouteMap</code> objects</li><li><strong>OpenAPI Spec Loaded</strong> ‚Üí Full specification from <code>hybrid_mesh.json</code></li><li><strong>Custom Routes Applied</strong> ‚Üí Only GET operations included (58 out of 162)</li><li><strong>Schema Enhancement</strong> ‚Üí <code>$ref</code> resolution, examples, cleaned schemas</li><li><strong>Tool Registration</strong> ‚Üí Exactly 3 tools registered</li><li><strong>LLM Instructions</strong> ‚Üí Clear workflow for exploration and execution</li></ol><p><strong>Key Benefits:</strong></p><ul><li><strong>Selective API Exposure</strong> ‚Üí Only safe, read-only operations</li><li><strong>Enhanced Schema Information</strong> ‚Üí Resolved references, examples, cleaned schemas</li><li><strong>LLM-Friendly Interface</strong> ‚Üí Clear instructions and workflow</li><li><strong>Consistent Tool Count</strong> ‚Üí Always 3 tools for orges servers</li></ul><p>This creates a powerful, controlled interface where LLMs can safely explore and interact with OpenAPI-based services while maintaining security and providing rich schema information.</p>`,62))])}const f=o(F,[["render",y]]);export{g as __pageData,f as default};
